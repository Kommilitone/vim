# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet clo "console.log()" i
console.log
endsnippet

snippet switch "switch" b
switch ($1) {
	case $2:
		$3
		break;
	default:
		$4
}
endsnippet

snippet self "self" b
var self = this;
endsnippet

snippet describe "describe" b
describe('$1', () => {

});
endsnippet

snippet test "test" b
test('$1', $2 () => {
	$3
});
endsnippet

snippet it "it" b
it('$1', $2 () => {
	$3
});
endsnippet

snippet ete "ete" b
expect($1).toEqual($2);
endsnippet

snippet toHaveBeenCalledWith "toHaveBeenCalledWith" b
expect($1).toHaveBeenCalledWith($2);
endsnippet

snippet toHaveBeenCalledTimes "toHaveBeenCalledTimes" b
expect($1).toHaveBeenCalledTimes($2);
endsnippet

snippet arr "arr" i
($1) => $2
endsnippet

snippet TE "TE" i
import * as TE from "fp-ts/lib/TaskEither";
endsnippet

snippet TA "Task" i
import * as T from "fp-ts/lib/Task";
endsnippet

snippet EI "EI" i
import * as E from "fp-ts/lib/Either";
endsnippet

snippet O "O" i
import * as O from "fp-ts/lib/Option";
endsnippet
